#!/bin/bash

readonly rssrc=${HOME}/.rss-roller

header () {
echo """<?xml version='1.0' encoding='UTF-8' ?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<!-- Made using rss-roller https://github.com/yradunchev/rss-roller -->
""" > ~/feedtop
echo """
<channel>
<title>$title</title>
<link>$link</link>
<description>$description</description>
<atom:link href='$rsslink' rel='self' type='application/rss+xml' />
""" >> ~/feedtop
echo "adding the header"
}

footer () {
echo """
</channel>

</rss>
""" >> ~/feedbottom
echo "adding the footer"
}

item () {
        echo """<item>
        <title>$fullTitle</title>
        <link>$linkadd</link>
        <pubDate>$postdate</pubDate>
        <guid>$guidadd</guid>
        <description>$extract</description>
        </item>
        """ >> ~/feed
}

combine () {
        header
        footer
        cat ~/feedtop ~/feed > ~/feedtb
        cat ~/feedtb ~/feedbottom > $feedname
        rm ~/feedtop ~/feed ~/feedtb ~/feedbottom
}

makeRSS () {
        [[ -d ${rssrc} ]] || mkdir ${rssrc}
        echo "Creating config file for a feed"
        echo """
        CONFIGURATION
        =============
        """
        read -p "Name this config file:" configfile
        read -p "What is the website name?: (e.g Google) " title
        read -p "What is the link to the website?: (e.g http://google.com) " link
        read -p "Give a brief description of the website: (e.g A search engine) " description
        read -p "Give the URL for the rss feed: (e.g http://google.com/rssfeed.xml) " rsslink
        read -p "The path to the feed file live on the disk?: (e.g /home/dog/www/rssfeed.xml has to match above) " feedname
        read -p "Source directory for the feed: " postDir
        echo -e "title=$title\nlink=$link\ndescription='$description'\nrsslink=$rsslink\nfeedname=$feedname\npostDir=$postDir">\
          ${rssrc}$/configfile.rc
        echo "please run rss-roller again with the -c $configfile or -l flags"
        exit
}

[[ $# -eq 0 ]] && makeRSS

while getopts ":c:l" opt; do
  case $opt in
    l) 
       rcArray=( $(find ${rssrc} -type f -name "*.rc") )
       for rcfile in "${rcArray[@]}"; do
        basename $rcfile .rc      
       done
       exit
       ;;
    c) CFL="$OPTARG" ;;
    \?) 
      echo "Invalid option -$OPTARG" >&2
      exit 2
      ;;
  esac
done

source ${rssrc}/${CFL}.rc

if [[ ! -f $feedname ]]; then
        touch $feedname
fi
        mode=a
        #Do the bad thing
        if [[ -f $feedname ]]; then
                rm $feedname
        fi
        touch $feedname
#       postArray=( $(ls -r "$postDir"/*.html) )
        postArray=( $(find ${postDir}/201* -type f -name "*.html") )
#       numPosts=$(ls "$postDir"/*.html | wc -l)
        numPosts=${#postArray[@]} 
        echo "numposts is $numPosts"
        postNum=0
        for posts in "${postArray[@]}"; do
                let postNum+=1
                post=$posts
                echo "adding post $postNum/$numPosts"
                fullTitle=$(grep -o '>.*</h1>' $post | sed 's/\(>\|<\/h1>\)//g')
                postDirSize=${#postDir} 
#               postname=${post##*/}
                postname=${post:$postDirSize:200} 
                linkadd="$link$postname"
                guidadd=$linkadd
                postdate=$(date --rfc-822 --date \
                  "$(grep -o '>.*</small>' $post |  sed 's/\(>\|<\/small>\)//g')"\
                  )
#               extract=$( sed '/post-content/!d;s//&\n/;s/.*\n//;:a;/div/bb;$!{n;ba};:b;s//\n&/;P;D' $post)
                item $post
        done
        combine
        exit
